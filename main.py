import asyncio
import websockets
import sys
import json
import base64
from datetime import datetime

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ü–≤–µ—Ç–∞
try:
    from colorama import Fore, Style, init
    init()
    COLORS = True
except ImportError:
    COLORS = False


def get_time():
    return datetime.now().strftime("%H:%M:%S")


async def chat_client():
    SERVER_IP = "192.168.1.123"
    PORT = "8080"
    CLIENT_ID = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID (–ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á): ").strip()
    if not CLIENT_ID:
        print("‚ùå ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    uri = f"ws://{SERVER_IP}:{PORT}/ws?id={CLIENT_ID}"
    print(f"üåê –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {uri}...")

    try:
        async with websockets.connect(uri) as websocket:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫–∞–∫ '{CLIENT_ID}'")

            # === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
            async def send_messages():
                while True:
                    try:
                        prompt = f"‚û§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å [–∫–æ–º—É:—Å–æ–æ–±—â–µ–Ω–∏–µ]: "
                        if COLORS:
                            prompt = Fore.BLUE + prompt + Style.RESET_ALL
                        user_input = await asyncio.get_event_loop().run_in_executor(None, input, prompt)

                        if not user_input.strip():
                            continue

                        if ':' not in user_input:
                            print(f"‚ùå –§–æ—Ä–º–∞—Ç: 'id_–ø–æ–ª—É—á–∞—Ç–µ–ª—è: —Å–æ–æ–±—â–µ–Ω–∏–µ'")
                            continue

                        to_id, message = user_input.split(':', 1)
                        to_id = to_id.strip()
                        message = message.strip()

                        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                        text_with_time = f"{message}"

                        # –ö–æ–¥–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã (–Ω–µ –≤ base64!)
                        data_bytes = text_with_time.encode('utf-8')  # ‚Üí bytes

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ JSON: {"to": "...", "from": "...", "data": [104,101,108,108,111]}
                        payload = {
                            "to": to_id,
                            "from": CLIENT_ID,
                            "data": list(data_bytes)  # ‚Üê –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bytes –≤ list[int]
                        }

                        await websocket.send(json.dumps(payload))
                        print(f"‚úâÔ∏è  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ -> {to_id}")

                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                        break

            # === –ü—Ä–∏—ë–º —Å–æ–æ–±—â–µ–Ω–∏–π ===
            async def receive_messages():
                while True:
                    try:
                        raw = await websocket.recv()

                        try:
                            msg = json.loads(raw)
                            sender = msg.get("from", "unknown")
                            data = msg.get("data", "")

                            # === –°–ª—É—á–∞–π 1: data ‚Äî –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–±–∞–π—Ç—ã) [104, 101, ...]
                            if isinstance(data, list):
                                try:
                                    text = bytes(data).decode('utf-8')
                                    output = f"üîî –û–¢ {sender}: {text}"
                                except Exception:
                                    output = f"üîπ –ü–æ–ª—É—á–µ–Ω–æ (–Ω–µ UTF-8): {bytes(data)}"

                            # === –°–ª—É—á–∞–π 2: data ‚Äî —Å—Ç—Ä–æ–∫–∞ –≤ base64
                            elif isinstance(data, str):
                                try:
                                    text = base64.b64decode(data).decode('utf-8')
                                    output = f"üîî –û–¢ {sender}: {text}"
                                except Exception:
                                    output = f"üîπ –ü–æ–ª—É—á–µ–Ω–æ (–æ—à–∏–±–∫–∞ base64): {data}"

                            # === –°–ª—É—á–∞–π 3: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                            else:
                                output = f"üì° –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {data}"

                        except json.JSONDecodeError:
                            # –ï—Å–ª–∏ –Ω–µ JSON ‚Äî –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
                            output = f"üì° RAW: {raw}"

                        if COLORS:
                            print(Fore.GREEN + output + Style.RESET_ALL)
                        else:
                            print(output)

                    except websockets.ConnectionClosed:
                        print(f"‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                        break
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—ë–º–∞: {e}")
                        break

            await asyncio.gather(send_messages(), receive_messages())

    except ConnectionRefusedError:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        asyncio.run(chat_client())
    except KeyboardInterrupt:
        print(f"\nüëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(0)